#+TITLE: Sparkle Object System
# export as color-theme-andreas

* Introduction
  The Sparkle Object System is a non-transparent persistent object
  system. The underlying concepts are borrowed from and compatible
  with the Semantic Web standards and conventions.
** Namespaces
   Namespaces are central to working with objects. All objects and
   properties are contained within namespaces and must be referenced
   in the context of a namespace.

   Namespaces provide the starting point for accessing named objects
   and properties. For instance, the "bscode:Echo" object can be
   accessed from a reference to the "bscode" namespace:
#+BEGIN_SRC lua
local bscode = sparkleObj.ns.bscode
local echo = bscode.Echo -- same as "bscode:Echo" in SPARQL/TTL
#+END_SRC

   Namespaces are also used to access properties:
#+BEGIN_SRC lua
print("bscode.Echo's class name is: " .. tostring(echo[bscode.className]))
#+END_SRC

   However, properties can also be accessed by indexing using strings:
#+BEGIN_SRC lua
print("bscode.Echo's class name is: " .. tostring(echo["bscode:className"]))
#+END_SRC

   Requests for objects that do not exist signal an error:
#+BEGIN_SRC lua
local x = bscode.NonExistingObject
-- ERROR
#+END_SRC
** Objects and References
   Named objects accessed directly in namespaces are complete and
   populated with their properties. However, property values are only
   object references. That is, you cannot directly access
   sub-properties of objects. References can be reified individually
   to complete objects.
* Semantics
** Creating Objects
   Objects can be created directly by calling
   =sparkleObj.createObject= with the namespace, name of the new
   object and the set of classes it will be explicitly contained in:
#+BEGIN_SRC lua
local bsbase = sparkleObj.ns.bsbase
local classes = {bsbase.SoftwareSystem}
sparkleObj.createObject(bsbase, "Git", classes)
#+END_SRC
** Multi-Value Property Assignment
   Due to the nature of properties in RDF(S), we must treat them as
   /relations/, and not /functions/ as they are typically regarded in
   OO-programming environments.

   Assignments to instance properties can do one of two things. They
   can either add to the set of values held by the property, or
   replace the set of values held by the property.

   To add to the set, use the normal assignment statement. The
   following code will add the values 1 and 2 to the value set for the
   =ns.prop= property:
#+BEGIN_SRC lua
ns.obj[ns.prop] = 1
ns.obj[ns.prop] = 2
#+END_SRC

   To replace the set of values, call the =replace= method with a
   single object or a set/table of objects:
#+BEGIN_SRC lua
ns.obj[ns.prop]:replace({1, 2}) -- assigns {1, 2} to the value set
-- or
ns.obj[ns.prop]:replace(1) -- assigns {1} as to the value set
#+END_SRC

   Additionally, the value set can be cleared with the =clear= method.
** Multi-Value Property Access
   Property access must accommodate both single-valued and
   multi-valued cases easily. In order to ensure that the use of the
   value set is as intended, values must be accessed by either the
   =value= or =values= methods. The raw Lua object returned by
   indexing the object instance by the property should not be used in
   application code.

   The =value= method is provided to return a single value from the
   property. This should only be used when it is known that the
   property is functional or contains only a single value. Calls to
   =value= on sets with more than one value will signal an error.

   The =values= method, in contrast, will return a set/table of
   values.

   The =size= method is provided to access the size of the value set.
** Datatype Literals
   Datatype literal values are opaque values like strings or
   integers. They are represented in the database as "datatype
   strings" with XSD types. They can be identified by a return value
   of "literal" from =sparkleObj.typeof=. Literal values can be
   accessed as strings via the =stringValue= property. Values can be
   accessed as native values via the =value= property. Supported
   native values are as follows:
   + =xsd:string= as Lua strings
   + =xsd:boolean= as Lua boolean
	 + "can have the following legal literals {true, false, 1, 0}"
   + =xsd:decimal=, =xsd:float=, =xsd:double=, =xsd:gYear= as Lua numbers
   + The remainder of datatypes will return =nil= for the =value= property:
	 + =xsd:duration=
	 + =xsd:dateTime=
	 + =xsd:time=
	 + =xsd:date=
	 + =xsd:gYearMonth=
	 + =xsd:gMonthDay=
	 + =xsd:gDay=
	 + =xsd:gMonth=
	 + =xsd:hexBinary=
	 + =xsd:base64Binary=
	 + =xsd:anyURI=
	 + =xsd:QName=
	 + =xsd:NOTATION=
   Assignments to datatype properties will be parsed by the underlying
   database and will signal an error if parsing fails.

   c.f. [[http://www.w3.org/tr/xmlschema-2/#datetime][XSD Reference]]

   Assignments to datatype properties with specific types can be
   specified as a pair:
#+BEGIN_SRC lua
   ns.obj[ns.someDateProp] = {xsd.date, "2014-01-01"}
#+END_SRC
** Object Properties
   Object properties are properties whose values refer to other
   objects. The values returned from object properties are, by
   default, references which can be used opaquely or reified into
   concrete objects for access to sub-properties.

   Object properties can be assigned from complete objects, references
   or strings:
#+BEGIN_SRC lua
sparkleObj.createObject(bsbase, "GitCmd", {bsbase.ExecutableProgram})
bsbase.GitCmd[bsbase.commandName] = "git"
-- assignment from complete object
bsbase.Git[bsbase.hasExecutableProgram] = bsbase.GitCmd
bsbase.Git[bsbase.hasExecutableProgram] = "bsbase:GitCmd"
-- TODO (separate doc section for this?:)
-- We could also use a string to represent the property:
bsbase.Git["bsbase:hasExecutableProgram"] = bsbase.GitCmd
#+END_SRC
** Object Reification
   Object references can be reified by calling the object reference as
   a zero-argument method. This will cause all properties to be
   populated. If the object reference has already been reified, the
   property values will be refreshed from the database.
#+BEGIN_SRC lua
local ref = ns.obj[ns.prop]
ref[rdfs.label] -- will signal an error
ref() -- reify the reference into a concrete object
-- property access is now allowed
print("Prop label is " .. tostring(ref[rdfs.label]))
#+END_SRC
* APIs
  The =sparkleObj= module should be used for top-level access to the
  Sparkle Object System.
#+BEGIN_SRC lua
local sparkleObj = require("sparkleObj")
#+END_SRC
  It needs to be initialized with the SPARQL endpoint URL:
#+BEGIN_SRC lua
sparkleObj.init{sparqlEndpointUrl="http://localhost:5820/banshee-sympatico/query"}
#+END_SRC
** Namespace
   + Access
#+BEGIN_SRC lua
local bsbase = sparkleObj.ns.bsbase
sparkleObj.namespacePrefix(bsbase)
sparkleObj.namespaceUri(bsbase)
#+END_SRC
   + Namespaces exist in the database as =bscode:OntologyPrefix= objects.
* Implementation
** Object Caching
   Must be aware of (implicit) changes in database due to reasoning,
   not concurrent access.
* Conformance Tests
  + Objects can be created and deleted
  + Objects can be cloned
  + Datatype property values can be assigned:
	+ From strings for all types
	+ From native values for all types that support it
  + Object property values can be assigned:
	+ From references
	+ From concrete objects
	+ From qname strings
  + Property sets can be:
	+ Appended
	+ Overwritten
	+ Cleared
	+ Assigned to property sets of other objects using =:values()=
* TODO
  + Equality/Comparison
  + BNODE handling
